Docker 

Namespaces
	- allow for privatization/isolation of application spaces 
	- runs on top of the kernel [ docker engine ] 
	  -> file system
	  -> network 
	  -> uts
	  -> pid 
	  -> user

CGroups 
	- control resources 
	- resource accounting 

Overlay FS 
	- layers (copy on write)  
	- storage drivers [ contingent upon OS you've chosen to run docker engine on ] 
	- aufs 
	- btrfs
	- devicemap per
	- vfs 
	- zfs
	source: docker containers and images documentation 


Why containers?
	- density (you can literally have 20 containers running on a system) 
	- consistency accross your environment/infrastructure 
	- portability 

Docker Client
	- talks to docker engine over Restful API port 2376 
	- run, start, stop, create 

Image Format 
	registry.docker.io/user/ubuntu:16.04 
	registry           user repository tag 

	docker container run alpine:latest uptime 
	- when run, will see if the image already exists locally 
	- if not, will pull from registry 

Life Cycle
	- image pull
	- container create
	- container attach
	- network connect
	- container start
	- container die
	- network disconnect 

docker events #monitor stuff 

	- docker containers last only until the program you started (exec) it with lasts. 
	- It will stop immediately after the program exits. 


Interactive mode 
	- docker container run -i -t alpine:3.4 sh 
	-i interactive 
	-t allocate tty 
	sh shell

List containers 
	- docker container ps (show running containers)
	- docker ps -l (list docker containers) 
	- docker container ps -n 2 (show last 2)  
	- docker ps -a (show all) 

PID Namespace
	- dockerd

Network Namespace 
	- ip a s [look] 
	- NIC gets mapped to container 


Namespaced|non-namespaced
cat /etc/issue |  uname -a 
ps aux 		   |  cat /proc/cpuinfo  
ifconfig       | date
hostname	   | free 


Make container persist>$ 

docker container run -idt larry/loop sh

-idt detach (d) interactive (i) tty (t) 

Connect to container 
docker container exec -it <id> sh 

Rename container 

docker container rename <whatever> 

docker pause/unpause <id> 

docker log -f (tail -f) 

docker system df [look at resources ] 

docker system prune (will remove any unused containers) 

docker container stop <container id> 

docker container rm <container id> 

### Managing Containers ### 
docker container run -idt -P school/vote (P) - port mapping
docker container run -idt -p 80:80 school/vote - port mapping 

### Container Operations ### 

docker container rename <container id/name> vote

docker container top gucci 

docker exec gucci ps -ef 

docker container inspect gucci 

	- see logpath, mount points and ip address 

docker container stats 
docker container stats --no-stream=true 

impose limits
docker container inspect | grep -i memory 
docker container stats --no-stream=true

docker update -m 400M vote 
docker container stats --no-stream=true -> didn't work for me

Launch containers with --cpu-shares 
docker run -d --name st-01 --cpu-shares 512 gucci stress --cpus 1 

### Approaches ### 

Imperative -> VM Like (manual) 
	::-> pull image ::-> run -> build <-- cp [code] ^ git


Declarative -> Dockerfile (automated)(recommended) 
1. pull image
2. run container
3. copy source code => FROM RUN COPY EXPOSE CMD (dockerfile) 
4. build/compile
5. commit
6. push 
	
## Cp code to container ## 
docker container cp . interim:/code

DOCKERFILE
FROM hoodielive/vote-worker:v0.1.0 

WORKDIR /code 

COPY pom.xml /code/
COPY src/main /code/src/main 

RUN mvn package 

CMD java -jar target/worker-jar-with-dependencies.jar

docker image build -t hoodielive/vote-worker:v0.2.0 . 

## Networking ##

eth0 -> veth0 -> bridge -< container 

docker network ls 
	- bridge is default
	- host 
	- none 

3 network drivers for host 

docker network inspect bridge 
docker container exec <container id> ip addr

it is possible to create another bridge | thus defining a driver with ip settings (custom) 

docker network create br01 -d bridge 
docker network inspect br01
docker network ls 

Disabling networking 

docker  run -itd --network none 


